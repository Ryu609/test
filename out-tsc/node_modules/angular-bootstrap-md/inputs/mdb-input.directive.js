"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var MdbInputDirective = /** @class */ (function () {
    function MdbInputDirective(el, renderer, platformId) {
        this.renderer = renderer;
        this.minLength = '0';
        this.maxLength = '524288';
        this.mdbValidate = true;
        this.focusCheckbox = true;
        this.focusRadio = true;
        this.isBrowser = false;
        this.isClicked = false;
        this.el = null;
        this.elLabel = null;
        this.elIcon = null;
        this.el = el;
        this.isBrowser = common_1.isPlatformBrowser(platformId);
    }
    MdbInputDirective.prototype.onclick = function () {
        this.renderer.addClass(this.elLabel, 'active');
        this.isClicked = true;
    };
    MdbInputDirective.prototype.onBlur = function () {
        if (this.el.nativeElement.value === '') {
            this.renderer.removeClass(this.elLabel, 'active');
        }
        this.isClicked = false;
        // Validation:
        if (this.mdbValidate) {
            var inputType = this.el.nativeElement.type;
            if (inputType === 'email') {
                if (this.customRegex) {
                    var re = new RegExp(this.el.nativeElement.getAttribute('customRegex'));
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                        /*tslint:disable:max-line-length*/
                    }
                    else if (re.test(this.el.nativeElement.value) && this.el.nativeElement.value.length >= this.minLength && this.el.nativeElement.value.length <= this.maxLength) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (!re.test(this.el.nativeElement.value) || this.el.nativeElement.value.length < this.minLength || this.el.nativeElement.value.length > this.maxLength) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                    }
                }
                else if (!this.customRegex) {
                    /*tslint:disable:max-line-length*/
                    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (re.test(this.el.nativeElement.value) && this.el.nativeElement.value.length >= this.minLength && this.el.nativeElement.value.length <= this.maxLength) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (!re.test(this.el.nativeElement.value) || this.el.nativeElement.value.length < this.minLength || this.el.nativeElement.value.length > this.maxLength) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                    }
                }
            }
            else if (inputType === 'password') {
                if (this.customRegex) {
                    var re = new RegExp(this.el.nativeElement.getAttribute('customRegex'));
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                        // tslint:disable-next-line:max-line-length
                    }
                    else if (this.el.nativeElement.value.match(re) && this.el.nativeElement.value.length >= this.minLength && this.el.nativeElement.value.length <= this.maxLength) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                        // tslint:disable-next-line:max-line-length
                    }
                    else if (!this.el.nativeElement.value.match(re) || this.el.nativeElement.value.length < this.minLength || this.el.nativeElement.value.length > this.maxLength) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
                else if (!this.customRegex) {
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                        // tslint:disable-next-line:max-line-length
                    }
                    else if (this.el.nativeElement.value.match(/^(?=(.*\d){1})(.*\S)(?=.*[a-zA-Z\S])[0-9a-zA-Z\S]/g) && this.el.nativeElement.value.length >= this.minLength && this.el.nativeElement.value.length <= this.maxLength) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                        // tslint:disable-next-line:max-line-length
                    }
                    else if (!this.el.nativeElement.value.match(/^(?=(.*\d){1})(.*\S)(?=.*[a-zA-Z\S])[0-9a-zA-Z\S]/g) || this.el.nativeElement.value.length < this.minLength || this.el.nativeElement.value.length > this.maxLength) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
            }
            else if (inputType === 'text') {
                if (this.customRegex) {
                    var re = new RegExp(this.el.nativeElement.getAttribute('customRegex'));
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                        // tslint:disable-next-line:max-line-length
                    }
                    else if (this.el.nativeElement.value.match(re) && this.el.nativeElement.value.length >= this.minLength && this.el.nativeElement.value.length <= this.maxLength) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                        // tslint:disable-next-line:max-line-length
                    }
                    else if (!this.el.nativeElement.value.match(re) || this.el.nativeElement.value.length < this.minLength || this.el.nativeElement.value.length > this.maxLength) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
                else if (!this.customRegex) {
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                        // tslint:disable-next-line:max-line-length
                    }
                    else if (this.el.nativeElement.value.match(/^[a-zA-Z0-9]+$/g) && this.el.nativeElement.value.length >= this.minLength && this.el.nativeElement.value.length <= this.maxLength) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                        // tslint:disable-next-line:max-line-length
                    }
                    else if (!this.el.nativeElement.value.match(/^[a-zA-Z0-9]+$/g) || this.el.nativeElement.value.length < this.minLength || this.el.nativeElement.value.length > this.maxLength) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
            }
            else if (inputType === 'submit') {
                for (var i = 0; i < this.el.nativeElement.parentElement.length; i++) {
                    if (this.el.nativeElement.parentElement[i].value == null || this.el.nativeElement.parentElement[i].value === '') {
                        this.renderer.addClass(this.el.nativeElement.parentElement[i], 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement.parentElement[i], 'counter-success');
                    }
                    else if (!this.el.nativeElement.parentElement[i].value == null) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
            }
            else if (inputType === 'tel') {
                if (this.customRegex) {
                    var re = new RegExp(this.el.nativeElement.getAttribute('customRegex'));
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (re.test(this.el.nativeElement.value) && this.el.nativeElement.value.length >= 8 && this.el.nativeElement.value.length <= 20) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (!re.test(this.el.nativeElement.value) || this.el.nativeElement.value.length > 20) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
                else if (!this.customRegex) {
                    var re = /^(1[ \-\+]{0,3}|\+1[ -\+]{0,3}|\+1|\+)?((\(\+?1-[2-9][0-9]{1,2}\))|(\(\+?[2-8][0-9][0-9]\))|(\(\+?[1-9][0-9]\))|(\(\+?[17]\))|(\([2-9][2-9]\))|([ \-\.]{0,3}[0-9]{2,4}))?([ \-\.][0-9])?([ \-\.]{0,3}[0-9]{2,4}){2,3}$/;
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (re.test(this.el.nativeElement.value) && this.el.nativeElement.value.length >= 8 && this.el.nativeElement.value.length <= 20) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (!re.test(this.el.nativeElement.value) || this.el.nativeElement.value.length > 20) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
            }
            else if (inputType === 'number') {
                if (this.customRegex) {
                    var re = new RegExp(this.el.nativeElement.getAttribute('customRegex'));
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (re.test(this.el.nativeElement.value) && this.el.nativeElement.value.length > 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (!re.test(this.el.nativeElement.value) || this.el.nativeElement.value.length < 1) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
                else if (!this.customRegex) {
                    var re = /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:(\.|,)\d+)?$/;
                    if (this.el.nativeElement.length === 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (re.test(this.el.nativeElement.value) && this.el.nativeElement.value.length > 0) {
                        this.renderer.removeClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.addClass(this.el.nativeElement, 'counter-success');
                    }
                    else if (!re.test(this.el.nativeElement.value) || this.el.nativeElement.value.length < 1) {
                        this.renderer.addClass(this.el.nativeElement, 'counter-danger');
                        this.renderer.removeClass(this.el.nativeElement, 'counter-success');
                    }
                }
            }
        }
    };
    MdbInputDirective.prototype.onchange = function () {
        this.checkValue();
    };
    MdbInputDirective.prototype.ngOnInit = function () {
        if (this.mdbValidate) {
            // Inititalise a new <span> wrong/right elements and render it below the host component.
            // this.wrongTextContainer = this.renderer.createElement(this.el.nativeElement.parentElement, 'span');
            this.wrongTextContainer = this.renderer.createElement('span');
            this.renderer.addClass(this.wrongTextContainer, 'inputVal');
            this.renderer.addClass(this.wrongTextContainer, 'text-danger');
            this.renderer.appendChild(this.el.nativeElement.parentElement, this.wrongTextContainer);
            var textWrong = this.el.nativeElement.getAttribute('data-error');
            this.wrongTextContainer.innerHTML = (textWrong ? textWrong : 'wrong');
            this.renderer.setStyle(this.wrongTextContainer, 'visibility', 'hidden');
            // this.rightTextContainer = this.renderer.createElement(this.el.nativeElement.parentElement, 'span');
            this.rightTextContainer = this.renderer.createElement('span');
            this.renderer.addClass(this.rightTextContainer, 'inputVal');
            this.renderer.addClass(this.rightTextContainer, 'text-success');
            this.renderer.appendChild(this.el.nativeElement.parentElement, this.rightTextContainer);
            var textSuccess = this.el.nativeElement.getAttribute('data-success');
            this.rightTextContainer.innerHTML = (textSuccess ? textSuccess : 'success');
            this.renderer.setStyle(this.rightTextContainer, 'visibility', 'hidden');
        }
    };
    MdbInputDirective.prototype.ngAfterViewInit = function () {
        var type = this.el.nativeElement.type;
        if (this.focusCheckbox && type === 'checkbox') {
            this.renderer.addClass(this.el.nativeElement, 'onFocusSelect');
        }
        if (this.focusRadio && type === 'radio') {
            this.renderer.addClass(this.el.nativeElement, 'onFocusSelect');
        }
    };
    MdbInputDirective.prototype.ngAfterViewChecked = function () {
        this.initComponent();
        this.checkValue();
        // tslint:disable-next-line:max-line-length
        if (this.el.nativeElement.tagName === 'MDB-COMPLETER' && this.el.nativeElement.getAttribute('ng-reflect-model') == null && !this.isClicked) {
            this.renderer.removeClass(this.elLabel, 'active');
        }
    };
    MdbInputDirective.prototype.initComponent = function () {
        var inputId;
        var inputP;
        if (this.isBrowser) {
            try {
                inputId = this.el.nativeElement.id;
            }
            catch (err) { }
            try {
                inputP = this.el.nativeElement.parentNode;
            }
            catch (err) { }
            this.elLabel = inputP.querySelector('label[for="' + inputId + '"]') || inputP.querySelector('label');
            if (this.elLabel && this.el.nativeElement.value !== '') {
                this.renderer.addClass(this.elLabel, 'active');
            }
            this.elIcon = inputP.querySelector('i') || false;
            if (this.elIcon) {
                this.renderer.addClass(this.elIcon, 'active');
            }
        }
    };
    MdbInputDirective.prototype.checkValue = function () {
        var value = '';
        if (this.elLabel != null) {
            value = this.el.nativeElement.value || '';
            if (value === '') {
                this.renderer.removeClass(this.elLabel, 'active');
                if (this.elIcon) {
                    this.renderer.removeClass(this.elIcon, 'active');
                }
                // tslint:disable-next-line:max-line-length
            }
            if (value === '' && this.isClicked ||
                value === '' && this.el.nativeElement.placeholder ||
                value === '' && this.el.nativeElement.attributes.placeholder) {
                this.renderer.addClass(this.elLabel, 'active');
            }
            if (this.el.nativeElement.getAttribute('ng-reflect-model') != null) {
                if (this.el.nativeElement.tagName === 'MDB-COMPLETER' && this.el.nativeElement.getAttribute('ng-reflect-model').length !== 0) {
                    this.renderer.addClass(this.elLabel, 'active');
                }
            }
        }
    };
    __decorate([
        core_1.Input('mdbInputDirective'),
        __metadata("design:type", MdbInputDirective)
    ], MdbInputDirective.prototype, "mdbInputDirective", void 0);
    __decorate([
        core_1.Input('placeholder'),
        __metadata("design:type", String)
    ], MdbInputDirective.prototype, "placeholder", void 0);
    __decorate([
        core_1.Input('minLength'),
        __metadata("design:type", String)
    ], MdbInputDirective.prototype, "minLength", void 0);
    __decorate([
        core_1.Input('maxLength'),
        __metadata("design:type", String)
    ], MdbInputDirective.prototype, "maxLength", void 0);
    __decorate([
        core_1.Input('customRegex'),
        __metadata("design:type", Object)
    ], MdbInputDirective.prototype, "customRegex", void 0);
    __decorate([
        core_1.Input('mdbValidate'),
        __metadata("design:type", Boolean)
    ], MdbInputDirective.prototype, "mdbValidate", void 0);
    __decorate([
        core_1.Input('focusCheckbox'),
        __metadata("design:type", Boolean)
    ], MdbInputDirective.prototype, "focusCheckbox", void 0);
    __decorate([
        core_1.Input('focusRadio'),
        __metadata("design:type", Boolean)
    ], MdbInputDirective.prototype, "focusRadio", void 0);
    __decorate([
        core_1.HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MdbInputDirective.prototype, "onclick", null);
    __decorate([
        core_1.HostListener('blur'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MdbInputDirective.prototype, "onBlur", null);
    __decorate([
        core_1.HostListener('change'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MdbInputDirective.prototype, "onchange", null);
    MdbInputDirective = __decorate([
        core_1.Directive({
            selector: '[mdbInputDirective]'
        }),
        __param(2, core_1.Inject(core_1.PLATFORM_ID)),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2, String])
    ], MdbInputDirective);
    return MdbInputDirective;
}());
exports.MdbInputDirective = MdbInputDirective;
//# sourceMappingURL=mdb-input.directive.js.map