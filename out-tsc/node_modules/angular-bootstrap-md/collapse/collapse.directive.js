"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
// todo: add animations when https://github.com/angular/angular/issues/9947 solved
var core_1 = require("@angular/core");
var CollapseDirective = /** @class */ (function () {
    function CollapseDirective(_el, _renderer) {
        this.showBsCollapse = new core_1.EventEmitter();
        this.shownBsCollapse = new core_1.EventEmitter();
        this.hideBsCollapse = new core_1.EventEmitter();
        this.hiddenBsCollapse = new core_1.EventEmitter();
        /** This event fires as soon as content collapses */
        this.collapsed = new core_1.EventEmitter();
        /** This event fires as soon as content becomes visible */
        this.expanded = new core_1.EventEmitter();
        // shown
        // @HostBinding('class.in')
        // @HostBinding('class.show')
        // @HostBinding('attr.aria-expanded')
        this.isExpanded = true;
        // hidden
        // @HostBinding('attr.aria-hidden')
        this.isCollapsed = false;
        // stale state
        // @HostBinding('class.collapse')
        this.isCollapse = true;
        // animation state
        // @HostBinding('class.collapsing')
        this.isCollapsing = false;
        this.collapsing = false;
        this.animationTime = 500;
        this._el = _el;
        this._renderer = _renderer;
    }
    CollapseDirective.prototype.ngOnInit = function () {
        this._el.nativeElement.classList.add('show');
        this._el.nativeElement.style.transition = this.animationTime + 'ms ease';
        if (!this.collapse) {
            this._el.nativeElement.classList.remove('show');
            this.hide();
        }
        else {
            this.show();
        }
        this.isExpanded = this.collapse;
    };
    CollapseDirective.prototype.ngAfterViewInit = function () {
        this.maxHeight = this._el.nativeElement.scrollHeight;
    };
    CollapseDirective.prototype.resize = function () {
        var container = this._el.nativeElement;
        this.maxHeight = this._el.nativeElement.scrollHeight;
        this._renderer.setStyle(container, 'height', this.maxHeight + 'px');
    };
    /** allows to manually toggle content visibility */
    CollapseDirective.prototype.toggle = function (event) {
        if (!this.collapsing) {
            if (this.isExpanded) {
                this.hide();
            }
            else {
                this.show();
            }
        }
        try {
            if (event.type === 'click') {
                this.maxHeight = event.target.parentElement.nextElementSibling.scrollHeight;
            }
            else if (event.type === 'mouseenter' || event.type === 'mouseleave') {
                this.maxHeight = event.target.nextElementSibling.scrollHeight;
            }
        }
        catch (error) { }
    };
    /** allows to manually hide content */
    CollapseDirective.prototype.hide = function () {
        var _this = this;
        this.collapsing = true;
        this.hideBsCollapse.emit();
        this.isCollapse = false;
        this.isCollapsing = true;
        this.isExpanded = false;
        this.isCollapsed = true;
        var container = this._el.nativeElement;
        container.classList.remove('collapse');
        container.classList.remove('show');
        container.classList.add('collapsing');
        this._renderer.setStyle(container, 'height', '0px');
        setTimeout(function () {
            container.classList.remove('collapsing');
            container.classList.add('collapse');
            _this.hiddenBsCollapse.emit();
            _this.collapsing = false;
        }, this.animationTime);
        this.collapsed.emit(this);
    };
    /** allows to manually show collapsed content */
    CollapseDirective.prototype.show = function () {
        var _this = this;
        if (!this.isExpanded) {
            this.collapsing = true;
            this.showBsCollapse.emit();
            this.isCollapse = false;
            this.isCollapsing = true;
            this.isExpanded = true;
            this.isCollapsed = false;
            var container_1 = this._el.nativeElement;
            container_1.classList.remove('collapse');
            container_1.classList.add('collapsing');
            setTimeout(function () {
                _this._renderer.setStyle(container_1, 'height', _this.maxHeight + 'px');
            }, 10);
            setTimeout(function () {
                container_1.classList.remove('collapsing');
                container_1.classList.add('collapse');
                container_1.classList.add('show');
                _this.shownBsCollapse.emit();
                _this.collapsing = false;
            }, this.animationTime - (this.animationTime * 0.5));
            this.expanded.emit(this);
        }
    };
    __decorate([
        core_1.Output('showBsCollapse'),
        __metadata("design:type", core_1.EventEmitter)
    ], CollapseDirective.prototype, "showBsCollapse", void 0);
    __decorate([
        core_1.Output('shownBsCollapse'),
        __metadata("design:type", core_1.EventEmitter)
    ], CollapseDirective.prototype, "shownBsCollapse", void 0);
    __decorate([
        core_1.Output('hideBsCollapse'),
        __metadata("design:type", core_1.EventEmitter)
    ], CollapseDirective.prototype, "hideBsCollapse", void 0);
    __decorate([
        core_1.Output('hiddenBsCollapse'),
        __metadata("design:type", core_1.EventEmitter)
    ], CollapseDirective.prototype, "hiddenBsCollapse", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], CollapseDirective.prototype, "collapsed", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], CollapseDirective.prototype, "expanded", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], CollapseDirective.prototype, "collapse", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], CollapseDirective.prototype, "animationTime", void 0);
    CollapseDirective = __decorate([
        core_1.Directive({
            selector: '[mdbCollapse]',
            exportAs: 'bs-collapse',
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2])
    ], CollapseDirective);
    return CollapseDirective;
}());
exports.CollapseDirective = CollapseDirective;
//# sourceMappingURL=collapse.directive.js.map